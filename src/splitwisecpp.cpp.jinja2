{%- macro to_cpp_func_params(method_descriptor) %}
    {%- for pd in method_descriptor.param_descriptors -%}
        {{pd.cpptype}} {{pd.name}}{{", " if not loop.last}}
    {%- endfor -%}
    {%- if method_descriptor.payload -%}{{", " if method_descriptor.param_descriptors}}const Json& payload {%- endif -%}
{% endmacro -%}
// Copyright (c) 2020 Gino Latorilla.

#include "splitwisecpp/splitwisecpp.h"
#include "context.hpp"
#include "http_request_builder.hpp"
#include <array>

namespace splitwisecpp
{

Splitwise::Splitwise(const Configuration& config)
{
    _context = new Context(&config);
}

Splitwise::~Splitwise()
{
    delete Context::cast(_context);
}
{% for md in method_descriptors %}
ApiResponse Splitwise::{{ md.name }}({{to_cpp_func_params(md)}})
{
    return build_http_request<HttpMethods::{{md.http_method}}>(Context::cast(_context))
        {%- if md.payload %}
                .with_json_payload(payload)
        {%- endif %}
                .with_uri("{{md.name}}")
        {%- for pd in md.param_descriptors %}
                .with_param({{pd.name}})
        {%- endfor %}
                .send();
}
{% endfor %}
}  // namespace splitwisecpp

// DO NOT EDIT BY HAND!
// 'tools/generate_cpp_api_from_descriptor' created me on {{gen_time}} from descriptor version {{ version }}

